// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var Backbone, ParentView, View, extend;
  View = require('backbone.viewevents').View;
  extend = require('underscore').extend;
  Backbone = require('backbone');
  ParentView = (function(_super) {

    __extends(ParentView, _super);

    function ParentView() {
      return ParentView.__super__.constructor.apply(this, arguments);
    }

    ParentView.prototype.render = function() {
      this.$el.html("<div class=\"a\"></div>");
      this.$a = this.$('.a');
      return this;
    };

    return ParentView;

  })(View);
  return describe('View with ViewEvents', function() {
    it('should bubble up events through view hierarchy', function() {
      var child, parent, parentNotified;
      parent = new ParentView().render();
      child = new View().render();
      parent.$a.append(child.$el);
      parentNotified = false;
      parent.on('trick', function(e) {
        return parentNotified = e;
      });
      child.trigger('trick');
      expect(parentNotified).to.be.ok;
      expect(parentNotified.type).to.be.equal('trick');
      return expect(parentNotified.view.cid).to.be.equal(child.cid);
    });
    it('should allow to use .once()', function() {
      var child, parent, parentNotified;
      parent = new ParentView().render();
      child = new View().render();
      parent.$a.append(child.$el);
      parentNotified = 0;
      parent.once('trick', function(e) {
        return parentNotified += 1;
      });
      child.trigger('trick');
      child.trigger('trick');
      return expect(parentNotified).to.be.equal(1);
    });
    it('should allow to use .off()', function() {
      var child, parent, parentNotified;
      parent = new ParentView().render();
      child = new View().render();
      parent.$a.append(child.$el);
      parentNotified = 0;
      parent.on('trick', function(e) {
        return parentNotified += 1;
      });
      child.trigger('trick');
      parent.off('trick');
      child.trigger('trick');
      return expect(parentNotified).to.be.equal(1);
    });
    it('should not interfere with DOM events', function() {
      var child, parent, parentNotified;
      parent = new ParentView().render();
      child = new View().render();
      parent.$a.append(child.$el);
      parentNotified = 0;
      parent.on('click', function(e) {
        return parentNotified += 1;
      });
      child.$el.click();
      return expect(parentNotified).to.be.equal(0);
    });
    it('should allow to use .on() by passing an object of event, callback pairs', function() {
      var child, parent, parentNotified, parentTricked;
      parent = new ParentView().render();
      child = new View().render();
      parent.$a.append(child.$el);
      parentTricked = false;
      parentNotified = false;
      parent.on({
        notify: function(e) {
          return parentNotified = e;
        },
        trick: function(e) {
          return parentTricked = e;
        }
      });
      expect(parentNotified).not.to.be.ok;
      child.trigger('notify');
      expect(parentNotified).to.be.ok;
      expect(parentNotified.type).to.be.equal('notify');
      expect(parentNotified.view.cid).to.be.equal(child.cid);
      expect(parentTricked).not.to.be.ok;
      child.trigger('trick');
      expect(parentTricked).to.be.ok;
      expect(parentTricked.type).to.be.equal('trick');
      return expect(parentTricked.view.cid).to.be.equal(child.cid);
    });
    it('should allow to use .listenTo() from Backbone.Events', function() {
      var listener, tricked, view;
      listener = extend({}, Backbone.Events);
      view = new View();
      tricked = false;
      listener.listenTo(view, 'trick', function(e) {
        return tricked = e;
      });
      view.trigger('trick');
      expect(tricked).to.be.ok;
      expect(tricked.type).to.be.equal('trick');
      return expect(tricked.view.cid).to.be.equal(view.cid);
    });
    it('should allow to use .stopListening() from Backbone.Events', function() {
      var listener, tricked, view;
      listener = extend({}, Backbone.Events);
      view = new View();
      tricked = 0;
      listener.listenTo(view, 'trick', function(e) {
        return tricked += 1;
      });
      view.trigger('trick');
      listener.stopListening();
      view.trigger('trick');
      return expect(tricked).to.be.equal(1);
    });
    it('should allow to use .stopListening(obj) from Backbone.Events', function() {
      var listener, tricked, view;
      listener = extend({}, Backbone.Events);
      view = new View();
      tricked = 0;
      listener.listenTo(view, 'trick', function(e) {
        return tricked += 1;
      });
      view.trigger('trick');
      listener.stopListening(view);
      view.trigger('trick');
      return expect(tricked).to.be.equal(1);
    });
    it('should allow to use .listenTo()', function() {
      var listener, tricked, view;
      listener = new ParentView().render();
      view = new View().render();
      listener.$a.append(view.$el);
      tricked = false;
      listener.listenTo(view, 'trick', function(e) {
        return tricked = e;
      });
      view.trigger('trick');
      expect(tricked).to.be.ok;
      expect(tricked.type).to.be.equal('trick');
      return expect(tricked.view.cid).to.be.equal(view.cid);
    });
    it('should allow to use .stopListening()', function() {
      var listener, listener0, tricked, tricked0, view;
      listener0 = extend({}, Backbone.Events);
      listener = new ParentView().render();
      view = new View().render();
      listener.$a.append(view.$el);
      tricked0 = 0;
      tricked = 0;
      listener0.listenTo(view, 'trick', function(e) {
        return tricked0 += 1;
      });
      listener.listenTo(view, 'trick', function(e) {
        return tricked += 1;
      });
      view.trigger('trick');
      listener.stopListening();
      view.trigger('trick');
      listener0.stopListening();
      view.trigger('trick');
      expect(tricked0).to.be.equal(2);
      return expect(tricked).to.be.equal(1);
    });
    return it('should allow to use .stopListening(obj)', function() {
      var listener, listener0, tricked, tricked0, view;
      listener0 = extend({}, Backbone.Events);
      listener = new ParentView().render();
      view = new View().render();
      listener.$a.append(view.$el);
      tricked0 = 0;
      tricked = 0;
      listener0.listenTo(view, 'trick', function(e) {
        return tricked0 += 1;
      });
      listener.listenTo(view, 'trick', function(e) {
        return tricked += 1;
      });
      view.trigger('trick');
      listener.stopListening(view);
      view.trigger('trick');
      listener0.stopListening(view);
      view.trigger('trick');
      expect(tricked0).to.be.equal(2);
      return expect(tricked).to.be.equal(1);
    });
  });
});
