// Generated by CoffeeScript 1.4.0
var __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

define(function(require) {
  var ParentView, View;
  View = require('backbone.viewevents').View;
  ParentView = (function(_super) {

    __extends(ParentView, _super);

    function ParentView() {
      return ParentView.__super__.constructor.apply(this, arguments);
    }

    ParentView.prototype.render = function() {
      this.$el.html("<div class=\"a\"></div>");
      this.$a = this.$('.a');
      return this;
    };

    return ParentView;

  })(View);
  return describe('View with ViewEvents', function() {
    it('should bubble up events through view hierarchy', function() {
      var child, parent, parentNotified;
      parent = new ParentView().render();
      child = new View().render();
      parent.$a.append(child.$el);
      parentNotified = false;
      parent.on('trick', function(e) {
        return parentNotified = e;
      });
      child.trigger('trick');
      expect(parentNotified).to.be.ok;
      expect(parentNotified.type).to.be.equal('trick');
      return expect(parentNotified.view.cid).to.be.equal(child.cid);
    });
    it('should allow to use once', function() {
      var child, parent, parentNotified;
      parent = new ParentView().render();
      child = new View().render();
      parent.$a.append(child.$el);
      parentNotified = 0;
      parent.once('trick', function(e) {
        return parentNotified += 1;
      });
      child.trigger('trick');
      child.trigger('trick');
      return expect(parentNotified).to.be.equal(1);
    });
    return it('should allow to use off', function() {
      var child, parent, parentNotified;
      parent = new ParentView().render();
      child = new View().render();
      parent.$a.append(child.$el);
      parentNotified = 0;
      parent.on('trick', function(e) {
        return parentNotified += 1;
      });
      child.trigger('trick');
      parent.off('trick');
      child.trigger('trick');
      return expect(parentNotified).to.be.equal(1);
    });
  });
});
